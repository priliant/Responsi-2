{"ast":null,"code":"import _asyncToGenerator from \"D:/Kuliah/Semester 5/Praktikum Pemrograman Mobile/ionic_peminjaman/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n\n    /**\n     * Perform an Http request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    this.request = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (options) {\n        return Request.request(options);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http GET request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.get = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (options) {\n        return Request.get(options);\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http POST request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.post = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (options) {\n        return Request.post(options);\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http PUT request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.put = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (options) {\n        return Request.put(options);\n      });\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http PATCH request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.patch = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (options) {\n        return Request.patch(options);\n      });\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http DELETE request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.del = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (options) {\n        return Request.del(options);\n      });\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    /**\n     * Gets all HttpCookies as a Map\n     */\n\n\n    this.getCookiesMap = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(function* ( // @ts-ignore\n      options) {\n        const cookies = Cookie.getCookies();\n        const output = {};\n\n        for (const cookie of cookies) {\n          output[cookie.key] = cookie.value;\n        }\n\n        return output;\n      });\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get all HttpCookies as an object with the values as an HttpCookie[]\n     */\n\n\n    this.getCookies = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(function* (options) {\n        // @ts-ignore\n        const {\n          url\n        } = options;\n        const cookies = Cookie.getCookies();\n        return {\n          cookies\n        };\n      });\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n    /**\n     * Set a cookie\n     * @param key The key to set\n     * @param value The value to set\n     * @param options Optional additional parameters\n     */\n\n\n    this.setCookie = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator(function* (options) {\n        const {\n          key,\n          value,\n          expires = '',\n          path = ''\n        } = options;\n        Cookie.setCookie(key, value, {\n          expires,\n          path\n        });\n      });\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n    /**\n     * Gets all cookie values unless a key is specified, then return only that value\n     * @param key The key of the cookie value to get\n     */\n\n\n    this.getCookie = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator(function* (options) {\n        return Cookie.getCookie(options.key);\n      });\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n    /**\n     * Deletes a cookie given a key\n     * @param key The key of the cookie to delete\n     */\n\n\n    this.deleteCookie = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator(function* (options) {\n        return Cookie.deleteCookie(options.key);\n      });\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n    /**\n     * Clears out cookies by setting them to expire immediately\n     */\n\n\n    this.clearCookies = /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator(function* ( // @ts-ignore\n      options) {\n        return Cookie.clearCookies();\n      });\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }();\n    /**\n     * Clears out cookies by setting them to expire immediately\n     */\n\n\n    this.clearAllCookies = /*#__PURE__*/_asyncToGenerator(function* () {\n      return Cookie.clearCookies();\n    });\n    /**\n     * Uploads a file through a POST request\n     * @param options TODO\n     */\n\n    this.uploadFile = /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator(function* (options) {\n        const formData = new FormData();\n        formData.append(options.name, options.blob || 'undefined');\n        const fetchOptions = Object.assign(Object.assign({}, options), {\n          body: formData,\n          method: 'POST'\n        });\n        return _this.post(fetchOptions);\n      });\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }();\n    /**\n     * Downloads a file\n     * @param options TODO\n     */\n\n\n    this.downloadFile = /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator(function* (options) {\n        const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n        const response = yield fetch(options.url, requestInit);\n        let blob;\n        if (!(options === null || options === void 0 ? void 0 : options.progress)) blob = yield response.blob();else if (!(response === null || response === void 0 ? void 0 : response.body)) blob = new Blob();else {\n          const reader = response.body.getReader();\n          let bytes = 0;\n          let chunks = [];\n          const contentType = response.headers.get('content-type');\n          const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n\n          while (true) {\n            const {\n              done,\n              value\n            } = yield reader.read();\n            if (done) break;\n            chunks.push(value);\n            bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n            const status = {\n              type: 'DOWNLOAD',\n              url: options.url,\n              bytes,\n              contentLength\n            };\n\n            _this.notifyListeners('progress', status);\n          }\n\n          let allChunks = new Uint8Array(bytes);\n          let position = 0;\n\n          for (const chunk of chunks) {\n            if (typeof chunk === 'undefined') continue;\n            allChunks.set(chunk, position);\n            position += chunk.length;\n          }\n\n          blob = new Blob([allChunks.buffer], {\n            type: contentType || undefined\n          });\n        }\n        return {\n          blob\n        };\n      });\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }();\n  }\n\n}","map":{"version":3,"names":["WebPlugin","Cookie","Request","HttpWeb","constructor","request","options","get","post","put","patch","del","getCookiesMap","cookies","getCookies","output","cookie","key","value","url","setCookie","expires","path","getCookie","deleteCookie","clearCookies","clearAllCookies","uploadFile","formData","FormData","append","name","blob","fetchOptions","Object","assign","body","method","downloadFile","requestInit","buildRequestInit","webFetchExtra","response","fetch","progress","Blob","reader","getReader","bytes","chunks","contentType","headers","contentLength","parseInt","done","read","push","length","status","type","notifyListeners","allChunks","Uint8Array","position","chunk","set","buffer","undefined"],"sources":["D:/Kuliah/Semester 5/Praktikum Pemrograman Mobile/ionic_peminjaman/node_modules/@capacitor-community/http/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async (\n        // @ts-ignore\n        options) => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearAllCookies = async () => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                let chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        type: 'DOWNLOAD',\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                let allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            return {\n                blob,\n            };\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}